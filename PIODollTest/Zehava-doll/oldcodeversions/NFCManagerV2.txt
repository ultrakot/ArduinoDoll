#include "NFCManager.h"
#include <SPI.h>
#include <Arduino.h>

NFCManager::NFCManager(uint8_t ss1, uint8_t ss2, int8_t rst, uint8_t sck, uint8_t miso, uint8_t mosi)
    : _ss1(ss1), _ss2(ss2), _rst(rst), _sck(sck), _miso(miso), _mosi(mosi),
      _reader1(ss1, rst), _reader2(ss2, rst),
      _ss3(4), _ss4(5), _ss5(15),
      _vspi(VSPI),
      _reader3(_ss3, rst), _reader4(_ss4, rst), _reader5(_ss5, rst)
{}

void NFCManager::begin() {
    // HSPI
    SPI.begin(_sck, _miso, _mosi, _ss1);
    pinMode(_ss1, OUTPUT);
    pinMode(_ss2, OUTPUT);
    digitalWrite(_ss1, HIGH);
    digitalWrite(_ss2, HIGH);

// HSPI
    _reader1.setSPI(&SPI);
    _reader2.setSPI(&SPI);
    _reader1.PCD_Init();
    delay(50);
    _reader2.PCD_Init();
    delay(50);

    byte ver1 = _reader1.PCD_ReadRegister(_reader1.VersionReg);
    Serial.print(F("Reader1 MFRC522 version: 0x"));
    Serial.println(ver1, HEX);
    if (ver1 == 0x00) Serial.println(F("❌ Reader1 communication failure – check wiring & power"));

    byte ver2 = _reader2.PCD_ReadRegister(_reader2.VersionReg);
    Serial.print(F("Reader2 MFRC522 version: 0x"));
    Serial.println(ver2, HEX);
    if (ver2 == 0x00) Serial.println(F("❌ Reader2 communication failure – check wiring & power"));

    // VSPI
    _vspi.begin(VSPI_SCK, VSPI_MISO, VSPI_MOSI, _ss3);
    pinMode(_ss3, OUTPUT);
    pinMode(_ss4, OUTPUT);
    pinMode(_ss5, OUTPUT);
    digitalWrite(_ss3, HIGH);
    digitalWrite(_ss4, HIGH);
    digitalWrite(_ss5, HIGH);

    _reader3.PCD_Init();
    delay(50);
    _reader4.PCD_Init();
    delay(50);
    _reader5.PCD_Init();
    delay(50);

    byte ver3 = _reader3.PCD_ReadRegister(_reader3.VersionReg);
    Serial.print(F("Reader3 MFRC522 version: 0x"));
    Serial.println(ver3, HEX);
    if (ver3 == 0x00) Serial.println(F("❌ Reader3 communication failure – check wiring & power"));

    byte ver4 = _reader4.PCD_ReadRegister(_reader4.VersionReg);
    Serial.print(F("Reader4 MFRC522 version: 0x"));
    Serial.println(ver4, HEX);
    if (ver4 == 0x00) Serial.println(F("❌ Reader4 communication failure – check wiring & power"));

    byte ver5 = _reader5.PCD_ReadRegister(_reader5.VersionReg);
    Serial.print(F("Reader5 MFRC522 version: 0x"));
    Serial.println(ver5, HEX);
    if (ver5 == 0x00) Serial.println(F("❌ Reader5 communication failure – check wiring & power"));
}

void NFCManager::pollReaders() {
    // HSPI Readers
    if (_reader1.PICC_IsNewCardPresent() && _reader1.PICC_ReadCardSerial()) {
        printUid("Reader1 UID:", _reader1);
        _reader1.PICC_HaltA();
        _reader1.PCD_StopCrypto1();
        delay(200);
    }
    if (_reader2.PICC_IsNewCardPresent() && _reader2.PICC_ReadCardSerial()) {
        printUid("Reader2 UID:", _reader2);
        _reader2.PICC_HaltA();
        _reader2.PCD_StopCrypto1();
        delay(200);
    }
    // VSPI Readers
    if (_reader3.PICC_IsNewCardPresent() && _reader3.PICC_ReadCardSerial()) {
        printUid("Reader3 UID:", _reader3);
        _reader3.PICC_HaltA();
        _reader3.PCD_StopCrypto1();
        delay(200);
    }
    if (_reader4.PICC_IsNewCardPresent() && _reader4.PICC_ReadCardSerial()) {
        printUid("Reader4 UID:", _reader4);
        _reader4.PICC_HaltA();
        _reader4.PCD_StopCrypto1();
        delay(200);
    }
    if (_reader5.PICC_IsNewCardPresent() && _reader5.PICC_ReadCardSerial()) {
        printUid("Reader5 UID:", _reader5);
        _reader5.PICC_HaltA();
        _reader5.PCD_StopCrypto1();
        delay(200);
    }
}

void NFCManager::printUid(const char* label, MFRC522& reader) {
    Serial.print(label);
    for (byte i = 0; i < reader.uid.size; i++) {
        Serial.print(' ');
        Serial.print(reader.uid.uidByte[i], HEX);
    }
    Serial.println();
}

